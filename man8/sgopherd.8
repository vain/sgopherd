.TH SGOPHERD 8 "December 2016" "sgopherd" "Small Gopher Daemon"
.SH NAME
sgopherd \- a small gopher server written in
.BR bash (1)
.SH SYNOPSIS
\fBsgopherd\fP
[\fB\-n\fP \fIname\fP]
[\fB\-p\fP \fIport\fP]
[\fB\-r\fP \fIdocroot\fP]
.SH DESCRIPTION
\fBsgopherd\fP is a simple gopher server for Unix-like systems,
preferably GNU. As it's implemented as a shell script (GNU Bash),
there's no standalone daemon functionality. Thus, it's meant to be
called by something like \fBinetd\fP(8) or \fBxinetd\fP(8).
\fBsgopherd\fP also works with \fBsystemd\fP(1)'s socket activation.
Despite being tiny, \fBsgopherd\fP supports
.IP \(bu 4
dynamic content using CGI scripts and dynamic menus using DCGI scripts,
.IP \(bu 4
automatic indexing,
.IP \(bu 4
automatic dynamic menu creation using \fI.INDEX.dcgi\fP scripts,
.IP \(bu 4
manual menus using plain text \fI.INDEX\fP files,
.IP \(bu 4
custom headers in auto-generated menus using \fI.HEADER\fP files,
.IP \(bu 4
manual annotation of single files in auto-generated menus using
\fI.<filename>.ANN\fP files,
.IP \(bu 4
ignore sets of files in auto-generated menus using \fI.IGNORE\fP files,
.IP \(bu 4
search queries,
.IP \(bu 4
logging to syslog and
.IP \(bu 4
basic file type detection using \fBfile\fP(1).
.P
Internally, \fBsgopherd\fP uses GNU \fBsed\fP(1).
.P
Not counting commented lines, \fBsgopherd\fP tries not to exceed 100
lines of code (with a tolerance of some lines). The script should be
easy to read and easy to understand.
.SH OPTIONS
.TP
\fB\-n\fP \fIname\fP
The server's hostname. This string will be used in menu items. This
variable does \fBNOT\fP control on which network interfaces the server
can be accessed. In fact, \fBsgopherd\fP knows nothing about networking;
all of that must be configured in (x)inetd or systemd. (Default:
\(lqlocalhost\(rq)
.TP
\fB\-p\fP \fIport\fP
The server's port. Again, this is only relevant for menu items.
(Default: \(lq70\(rq)
.TP
\fB\-r\fP \fIdocroot\fP
The document root. This path \fBMUST NOT\fP end with a slash. No files
outside of this directory can be served. However, it's possible to
create symlinks in this directory which point to an arbitrary location.
(Default: \(lq/srv/gopher\(rq)
.SH "CONFIGURATION \(em XINETD"
There is no special configuration file for \fBsgopherd\fP. Everything is
configured using the command line arguments. \fBinetd\fP(8) or
\fBxinetd\fP(8), on the other hand, must be configured. Have a look at
your (x)inetd documentation to learn how to do this. As an example, the
following could be used to integrate \fBsgopherd\fP into
\fBxinetd\fP(8):
.P
\f(CW
.nf
    service gopher
    {
        socket_type = stream
        wait        = no
        user        = http
        server      = /usr/bin/sgopherd
        server_args = -n myhostname -r /srv/gopher
        disable     = no
    }
.fi
\fP
.P
If (x)inetd is running and a client connects at port 70 (the default
port for the gopher service), then \fBsgopherd\fP will be executed.
.P
Remember to set \fBdisable = no\fP if you wish to run \fBsgopherd\fP.
.SH "CONFIGURATION \(em SYSTEMD"
If you don't like (x)inetd anymore, it's also possible to use systemd's
socket activation to run \fBsgopherd\fP. In contrast to inetd, systemd
does not set any environment variables which contain information about
the remote host. \fBsgopherd\fP wants to write that information to
syslog, though. It's up to you: Either you use a little wrapper script
or you ignore this issue.
.P
\fIsgopherd.socket\fP and \fIsgopherd@.service\fP are provided. They
look something like this:
.P
\fIsgopherd.socket\fP:
.P
\f(CW
.nf
    [Socket]
    ListenStream=70
    Accept=yes

    [Install]
    WantedBy=sockets.target
.fi
\fP
.P
\fIsgopherd@.service\fP:
.P
\f(CW
.nf
    [Unit]
    Description=sgopherd per-connection server

    [Service]
    User=http
    ExecStart=/usr/bin/sgopherd-systemd %i -n myhostname -r /srv/gopher
    StandardInput=socket
    StandardOutput=socket
    StandardError=syslog
.fi
\fP
.P
Those files make use of the wrapper script \fIsgopherd-systemd\fP which,
in itself, doesn't do very much:
.P
\f(CW
.nf
    #!/bin/bash

    REMOTE_HOST=$1
    shift

    REMOTE_HOST=${REMOTE_HOST##*-}
    REMOTE_HOST=${REMOTE_HOST%:*}

    export REMOTE_HOST
    exec sgopherd "$@"
.fi
\fP
.P
You may have noticed that we use the template form here. The \fB%i\fP
gets replaced with information about the remote host and the wrapper
scripts transforms this argument into something that's usable by
\fBsgopherd\fP.
.P
You should place \fIsgopherd@.service\fP in \fI/etc/systemd/system\fP
instead of \fI/usr/lib/systemd/system\fP because you'll most likely want
to change the parameters for \fB\-n\fP and \fB\-r\fP.
.P
To run \fBsgopherd\fP through systemd, you'd have to do \fBsystemctl
enable sgopherd.socket\fP or \fBsystemctl start sgopherd.socket\fP.
.SH "INDEX FILE FORMAT"
The gopher protocol is trivial in technical terms but it's cumbersome to
write gopher menus by hand. Hence, the following file format simplifies
this process. It's pretty similar to the format of \fIindex.gph\fP files
in \fBgeomyidae\fP(8), another gopher server.
.P
An index file may contain arbitrary text which is translated into an
\(lqinformational text\(rq item in the gopher menu. On the other hand, a
line beginning with an opening bracket will be interpreted by
\fBsgopherd\fP and will create a menu item. It has the following
structure:
.IP
\fB[\fP\fI<type>\fP\fB|\fP\fI<desc>\fP\fB|\fP\fI<path>\fP\fB|\fP\fI<host>\fP\fB|\fP\fI<port>\fP\fB]\fP
.P
Where:
.IP \(bu 4
\fI<type>\fP is a valid gopher item type (see \fIRFC 1436\fP).
.IP \(bu 4
\fI<desc>\fP is the description of the item.
.IP \(bu 4
\fI<path>\fP is an absolute or relative path to the gopher item.
Relative paths are meant to be relative to the current directory and
should only point to a location on the current host. Note: When using
gopher\+ \(lqURL links\(rq you must place an exclamation mark in front
of \fI<path>\fP. To be more precise, an exclamation mark disables
automatic prefixing for relativ paths.
.IP \(bu 4
\fI<host>\fP is the target host. If this is set to \(lqserver\(rq, then
the server's hostname is used (see configuration item \fBservername\fP).
.IP \(bu 4
\fI<port>\fP is the port of the target host. If this is set to
\(lqport\(rq, then the local server's port is used (see configuration
item \fBserverport\fP).
.P
Thus, an index file could read as follows:
.P
\f(CW
.nf
    Welcome!

    Have fun browsing this server.

    [0|About this server|about.txt|server|port]
    [0|A quote|/random/quote.txt|server|port]
    [1|Pics|/pics|server|port]
    [1|My friend's server|foo.friend.org|70]
    [h|Funny prank|!URL:http://www.microsoft.com|server|port]
.fi
\fP
.P
The index file format will be used under several circumstances, see
below.
.SH INDEXING
If a directory is requested by the client, \fBsgopherd\fP will
.IP \(bu 4
read and parse the special file \fI.INDEX\fP if it exists, or otherwise
.IP \(bu 4
execute the DCGI script (see below) \fI.INDEX.dcgi\fP (if it exists) and
parse its output according to the index file format, or otherwise
.IP \(bu 4
create a simple menu containing all non-hidden files in the directory.
Files and directories beginning with a dot are considered hidden.
.SS "Special functions for auto-generated menus"
If a file called \fI.HEADER\fP exists in the directory, then this file
will be parsed according to the index file format and it will be shown
on top of the menu. \fI.HEADER\fP files are not shown in the menu
itself.
.P
Sometimes, you may want to add an annotation to one single file.
Normally, this would require you to write a complete \fI.INDEX\fP file.
To avoid this, for each file or directory it is checked if another file
called \fI.<filename>.ANN\fP exists. This file will be parsed according
to the index file format and will be shown right before the menu item
for file \fI<filename>\fP.
.P
A directory may contain a file called \fI.IGNORE\fP. Similar to bash's
$\fBGLOBIGNORE\fP, it can contain a list of patterns to be excluded from
auto-generated menus (patterns must be separated by colons). You can use
this to ignore specific files. For example, if your \fI.IGNORE\fP
contained the following line, then all files ending in \(lq.groff\(rq or
\(lq.log\(rq would not show up in auto-generated indices:
.P
\f(CW
.nf
    *.groff:*.log
.fi
\fP
.P
Keep in mind: This only applies to auto-generated menus.
.SH "DYNAMIC CONTENT"
.SS "CGI scripts"
Every executable file is treated as a CGI script if the file name ends
in \(lq.cgi\(rq. If such a file is requested, it is executed and the
output on \fBstdout\fP is sent to the client. If a search string was
supplied, then this string is written to the script's \fBstdin\fP. The
script's working directory is the same as its location.
.P
Note: There are no environment variables provided to the script, yet.
.SS "DCGI scripts"
Pretty much the same as CGI scripts but the file name must end with
\(lq.dcgi\(rq. Furthermore, the script's output will be interpreted
according to the index file format. This mechanism allows you to
dynamically create gopher menus.
.SS "Notes on Security"
Please note that (D)CGI scripts are run as the same user as
\fBsgopherd\fP itself. Also, there are no special security mechanisms in
effect. That is, if the \fBsgopherd\fP-user has the rights to erase your
hard drive, then every (D)CGI script can do the same!
.P
As (D)CGI scripts can receive user input that may be malicious, you have
to be very careful.
.SH LOGGING
\fBsgopherd\fP will log to syslog using \fBlogger\fP(1). It'll use
\fBLOG_DAEMON\fP as \fIfacility\fP, so all messages should show up in
your \fI/var/log/daemon.log\fP or similar. Regular messages are of
\fIlevel\fP \fBLOG_INFO\fP, error conditions are \fBLOG_ERR\fP.
.P
Each line shows up as follows:
.IP
\fBsgopherd[\fP\fI<pid>\fP\fB]: '\fP\fI<host>\fP\fB' '\fP\fI<type>\fP\fB' '\fP\fI<selector>\fP\fB'\fP
.P
Where:
.IP \(bu 4
\fI<pid>\fP is the process ID of the shell script as invoked by (x)inetd
or systemd.
.IP \(bu 4
\fI<host>\fP is the IP of the remote host. (x)inetd is expected to fill
the environment variable $\fBREMOTE_HOST\fP when launching
\fBsgopherd\fP. When using systemd, the wrapper script
(\fBsgopherd-systemd\fP) takes care of this.
.IP \(bu 4
\fI<type>\fP shows the type of the served ressource, such as
\fBINDEX\fP, \fBINDEX.dcgi\fP, \fBAUTOINDEX\fP, \fBCGI\fP, \fBDCGI\fP or
\fBFILE\fP. If the request was invalid or the file could not be found,
then \fBINVALID\fP will show up in your logfile.
.IP \(bu 4
\fI<selector>\fP is the full request sent by the client.
.SH FILES
.PD 0
.TP
\fI/etc/inetd.conf\fP
.TP
\fI/etc/xinetd.d/sgopherd\fP
\fBinetd\fP(8) or \fBxinetd\fP(8) config file for \fBsgopherd\fP.
.PD
.P
.PD 0
.TP
\fI/etc/systemd/system/sgopherd@.service\fP
.TP
\fI/usr/lib/systemd/system/sgopherd@.service\fP
.TP
\fI/usr/lib/systemd/system/sgopherd.socket\fP
\fBsystemd\fP(1) config files for running \fBsgopherd\fP using socket
activation.
.PD
.TP
\fI/var/log/daemon.log\fP
\fBsgopherd\fP's log messages sent to syslog should end up this file.
May be different on your system.
.SH BUGS
If you find a bug, I'd happy to hear about it. Either use the bug
tracker at \fIhttps://github.com/vain/sgopherd\fP or send an e-mail to
\fIpcode@uninformativ.de\fP. If that doesn't work, then you should find
up to date contact information at \fIhttp://uninformativ.de\fP or
\fIgopher://uninformativ.de\fP.
.P
Currently, \fBsgopherd\fP requires GNU \fBbash\fP(1) and GNU
\fBsed\fP(1). This means that it won't run on non-GNU systems such as
the BSD family \(en unless you install those GNU programs.  Porting
\fBsgopherd\fP to POSIX \fBsh\fP(1p) will most likely result in a
complete rewrite. Porting it to POSIX \fBsed\fP(1p), however, should not
be that hard.
.P
The RFC requires that, in some circumstances, a line containing only one
single dot is sent. For example, gopher menus must end with such a line.
\fBsgopherd\fP does not send this extra dot. Most other servers I found
don't do this, either. Nowadays, clients are intelligent enough not to
require this dot.
.SH LICENSE
\fBsgopherd\fP is released as \(lqPIZZA-WARE\(rq. See the accompanying
\fILICENSE\fP file.
.SH HISTORY
2011 \(en Originally written by Peter Hofmann (pcode@uninformativ.de).
.SH "SEE ALSO"
.BR bash (1),
.BR sed (1),
.BR file (1),
.BR inetd (8),
.BR xinetd (8),
.BR logger (1),
.BR syslog (3),
.BR geomyidae (8),
RFC 1436.
